{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs2/helpers/interopRequireDefault\");\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime-corejs2/regenerator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/esm/slicedToArray\"));\n\nvar _promise = _interopRequireDefault(require(\"@babel/runtime-corejs2/core-js/promise\"));\n\nvar _assign = _interopRequireDefault(require(\"@babel/runtime-corejs2/core-js/object/assign\"));\n\nvar _set = _interopRequireDefault(require(\"@babel/runtime-corejs2/core-js/set\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/esm/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/esm/createClass\"));\n\nvar _defineProperty = _interopRequireDefault(require(\"@babel/runtime-corejs2/core-js/object/define-property\"));\n\nvar __importDefault = void 0 && (void 0).__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\n(0, _defineProperty[\"default\"])(exports, \"__esModule\", {\n  value: true\n});\n\nvar url_1 = require(\"url\");\n\nvar mitt_1 = __importDefault(require(\"../mitt\"));\n\nvar utils_1 = require(\"../utils\");\n\nvar rewrite_url_for_export_1 = require(\"./rewrite-url-for-export\");\n\nvar route_matcher_1 = require(\"./utils/route-matcher\");\n\nvar route_regex_1 = require(\"./utils/route-regex\");\n\nfunction toRoute(path) {\n  return path.replace(/\\/$/, '') || '/';\n}\n\nvar Router =\n/*#__PURE__*/\nfunction () {\n  function Router(pathname, query, as, _ref) {\n    var _this = this;\n\n    var initialProps = _ref.initialProps,\n        pageLoader = _ref.pageLoader,\n        App = _ref.App,\n        Component = _ref.Component,\n        err = _ref.err;\n    (0, _classCallCheck2[\"default\"])(this, Router);\n\n    this.onPopState = function (e) {\n      if (!e.state) {\n        // We get state as undefined for two reasons.\n        //  1. With older safari (< 8) and older chrome (< 34)\n        //  2. When the URL changed with #\n        //\n        // In the both cases, we don't need to proceed and change the route.\n        // (as it's already changed)\n        // But we can simply replace the state with the new changes.\n        // Actually, for (1) we don't need to nothing. But it's hard to detect that event.\n        // So, doing the following for (1) does no harm.\n        var _pathname = _this.pathname,\n            _query = _this.query;\n\n        _this.changeState('replaceState', utils_1.formatWithValidation({\n          pathname: _pathname,\n          query: _query\n        }), utils_1.getURL());\n\n        return;\n      } // Make sure we don't re-render on initial load,\n      // can be caused by navigating back from an external site\n\n\n      if (e.state.options && e.state.options.fromExternal) {\n        return;\n      } // If the downstream application returns falsy, return.\n      // They will then be responsible for handling the event.\n\n\n      if (_this._bps && !_this._bps(e.state)) {\n        return;\n      }\n\n      var _e$state = e.state,\n          url = _e$state.url,\n          as = _e$state.as,\n          options = _e$state.options;\n\n      if (process.env.NODE_ENV !== 'production') {\n        if (typeof url === 'undefined' || typeof as === 'undefined') {\n          console.warn('`popstate` event triggered but `event.state` did not have `url` or `as` https://err.sh/zeit/next.js/popstate-state-empty');\n        }\n      }\n\n      _this.replace(url, as, options);\n    }; // represents the current component key\n\n\n    this.route = toRoute(pathname); // set up the component cache (by route keys)\n\n    this.components = {}; // We should not keep the cache, if there's an error\n    // Otherwise, this cause issues when when going back and\n    // come again to the errored page.\n\n    if (pathname !== '/_error') {\n      this.components[this.route] = {\n        Component: Component,\n        props: initialProps,\n        err: err\n      };\n    }\n\n    this.components['/_app'] = {\n      Component: App\n    }; // Backwards compat for Router.router.events\n    // TODO: Should be remove the following major version as it was never documented\n    // @ts-ignore backwards compatibility\n\n    this.events = Router.events;\n    this.pageLoader = pageLoader;\n    this.pathname = pathname;\n    this.query = query;\n    this.asPath = as;\n    this.subscriptions = new _set[\"default\"]();\n    this.componentLoadCancel = null;\n\n    if (typeof window !== 'undefined') {\n      // in order for `e.state` to work on the `onpopstate` event\n      // we have to register the initial route upon initialization\n      this.changeState('replaceState', utils_1.formatWithValidation({\n        pathname: pathname,\n        query: query\n      }), as);\n      window.addEventListener('popstate', this.onPopState);\n      window.addEventListener('unload', function () {\n        // Workaround for popstate firing on initial page load when\n        // navigating back from an external site\n        if (history.state) {\n          var _history$state = history.state,\n              url = _history$state.url,\n              _as2 = _history$state.as,\n              options = _history$state.options;\n\n          _this.changeState('replaceState', url, _as2, (0, _assign[\"default\"])({}, options, {\n            fromExternal: true\n          }));\n        }\n      });\n    }\n  }\n\n  (0, _createClass2[\"default\"])(Router, [{\n    key: \"update\",\n    value: function update(route, Component) {\n      var data = this.components[route];\n\n      if (!data) {\n        throw new Error(\"Cannot update unavailable route: \".concat(route));\n      }\n\n      var newData = (0, _assign[\"default\"])({}, data, {\n        Component: Component\n      });\n      this.components[route] = newData; // pages/_app.js updated\n\n      if (route === '/_app') {\n        this.notify(this.components[this.route]);\n        return;\n      }\n\n      if (route === this.route) {\n        this.notify(newData);\n      }\n    }\n  }, {\n    key: \"reload\",\n    value: function reload() {\n      window.location.reload();\n    }\n    /**\n     * Go back in history\n     */\n\n  }, {\n    key: \"back\",\n    value: function back() {\n      window.history.back();\n    }\n    /**\n     * Performs a `pushState` with arguments\n     * @param url of the route\n     * @param as masks `url` for the browser\n     * @param options object you can define `shallow` and other options\n     */\n\n  }, {\n    key: \"push\",\n    value: function push(url) {\n      var as = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : url;\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      return this.change('pushState', url, as, options);\n    }\n    /**\n     * Performs a `replaceState` with arguments\n     * @param url of the route\n     * @param as masks `url` for the browser\n     * @param options object you can define `shallow` and other options\n     */\n\n  }, {\n    key: \"replace\",\n    value: function replace(url) {\n      var as = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : url;\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      return this.change('replaceState', url, as, options);\n    }\n  }, {\n    key: \"change\",\n    value: function change(method, _url, _as, options) {\n      var _this2 = this;\n\n      return new _promise[\"default\"](function (resolve, reject) {\n        // If url and as provided as an object representation,\n        // we'll format them into the string version here.\n        var url = typeof _url === 'object' ? utils_1.formatWithValidation(_url) : _url;\n        var as = typeof _as === 'object' ? utils_1.formatWithValidation(_as) : _as; // Add the ending slash to the paths. So, we can serve the\n        // \"<page>/index.html\" directly for the SSR page.\n\n        if (process.env.__NEXT_EXPORT_TRAILING_SLASH) {\n          // @ts-ignore this is temporarily global (attached to window)\n          if (__NEXT_DATA__.nextExport) {\n            as = rewrite_url_for_export_1.rewriteUrlForNextExport(as);\n          }\n        }\n\n        _this2.abortComponentLoad(as); // If the url change is only related to a hash change\n        // We should not proceed. We should only change the state.\n\n\n        if (_this2.onlyAHashChange(as)) {\n          _this2.asPath = as;\n          Router.events.emit('hashChangeStart', as);\n\n          _this2.changeState(method, url, as);\n\n          _this2.scrollToHash(as);\n\n          Router.events.emit('hashChangeComplete', as);\n          return resolve(true);\n        }\n\n        var _url_1$parse = url_1.parse(url, true),\n            pathname = _url_1$parse.pathname,\n            query = _url_1$parse.query; // If asked to change the current URL we should reload the current page\n        // (not location.reload() but reload getInitialProps and other Next.js stuffs)\n        // We also need to set the method = replaceState always\n        // as this should not go into the history (That's how browsers work)\n        // We should compare the new asPath to the current asPath, not the url\n\n\n        if (!_this2.urlIsNew(as)) {\n          method = 'replaceState';\n        } // @ts-ignore pathname is always a string\n\n\n        var route = toRoute(pathname);\n        var _options$shallow = options.shallow,\n            shallow = _options$shallow === void 0 ? false : _options$shallow; // detect dynamic routing\n\n        if (route.indexOf('/$') !== -1) {\n          var rr = route_regex_1.getRouteRegex(route);\n          var routeMatch = route_matcher_1.getRouteMatcher(rr)(as);\n\n          if (!routeMatch) {\n            console.error(\"Your `<Link>`'s `as` value is incompatible with the `href` value. This is invalid.\");\n            return resolve(false);\n          } // Merge params into `query`, overwriting any specified in search\n\n\n          (0, _assign[\"default\"])(query, routeMatch);\n        }\n\n        Router.events.emit('routeChangeStart', as); // If shallow is true and the route exists in the router cache we reuse the previous result\n        // @ts-ignore pathname is always a string\n\n        _this2.getRouteInfo(route, pathname, query, as, shallow).then(function (routeInfo) {\n          var error = routeInfo.error;\n\n          if (error && error.cancelled) {\n            return resolve(false);\n          }\n\n          Router.events.emit('beforeHistoryChange', as);\n\n          _this2.changeState(method, url, as, options);\n\n          var hash = window.location.hash.substring(1); // @ts-ignore pathname is always defined\n\n          _this2.set(route, pathname, query, as, (0, _assign[\"default\"])({}, routeInfo, {\n            hash: hash\n          }));\n\n          if (error) {\n            Router.events.emit('routeChangeError', error, as);\n            throw error;\n          }\n\n          Router.events.emit('routeChangeComplete', as);\n          return resolve(true);\n        }, reject);\n      });\n    }\n  }, {\n    key: \"changeState\",\n    value: function changeState(method, url, as) {\n      var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n      if (process.env.NODE_ENV !== 'production') {\n        if (typeof window.history === 'undefined') {\n          console.error(\"Warning: window.history is not available.\");\n          return;\n        } // @ts-ignore method should always exist on history\n\n\n        if (typeof window.history[method] === 'undefined') {\n          console.error(\"Warning: window.history.\".concat(method, \" is not available\"));\n          return;\n        }\n      }\n\n      if (method !== 'pushState' || utils_1.getURL() !== as) {\n        // @ts-ignore method should always exist on history\n        window.history[method]({\n          url: url,\n          as: as,\n          options: options\n        }, null, as);\n      }\n    }\n  }, {\n    key: \"getRouteInfo\",\n    value: function getRouteInfo(route, pathname, query, as) {\n      var _this3 = this;\n\n      var shallow = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n      var cachedRouteInfo = this.components[route]; // If there is a shallow route transition possible\n      // If the route is already rendered on the screen.\n\n      if (shallow && cachedRouteInfo && this.route === route) {\n        return _promise[\"default\"].resolve(cachedRouteInfo);\n      }\n\n      return new _promise[\"default\"](function (resolve, reject) {\n        if (cachedRouteInfo) {\n          return resolve(cachedRouteInfo);\n        }\n\n        _this3.fetchComponent(route).then(function (Component) {\n          return resolve({\n            Component: Component\n          });\n        }, reject);\n      }).then(function (routeInfo) {\n        var Component = routeInfo.Component;\n\n        if (process.env.NODE_ENV !== 'production') {\n          var _require = require('react-is'),\n              isValidElementType = _require.isValidElementType;\n\n          if (!isValidElementType(Component)) {\n            throw new Error(\"The default export is not a React Component in page: \\\"\".concat(pathname, \"\\\"\"));\n          }\n        }\n\n        return new _promise[\"default\"](function (resolve, reject) {\n          var ctx = {\n            pathname: pathname,\n            query: query,\n            asPath: as\n          };\n\n          _this3.getInitialProps(Component, ctx).then(function (props) {\n            routeInfo.props = props;\n            _this3.components[route] = routeInfo;\n            resolve(routeInfo);\n          }, reject);\n        });\n      })[\"catch\"](function (err) {\n        return new _promise[\"default\"](function (resolve) {\n          if (err.code === 'PAGE_LOAD_ERROR') {\n            // If we can't load the page it could be one of following reasons\n            //  1. Page doesn't exists\n            //  2. Page does exist in a different zone\n            //  3. Internal error while loading the page\n            // So, doing a hard reload is the proper way to deal with this.\n            window.location.href = as; // Changing the URL doesn't block executing the current code path.\n            // So, we need to mark it as a cancelled error and stop the routing logic.\n\n            err.cancelled = true; // @ts-ignore TODO: fix the control flow here\n\n            return resolve({\n              error: err\n            });\n          }\n\n          if (err.cancelled) {\n            // @ts-ignore TODO: fix the control flow here\n            return resolve({\n              error: err\n            });\n          }\n\n          resolve(_this3.fetchComponent('/_error').then(function (Component) {\n            var routeInfo = {\n              Component: Component,\n              err: err\n            };\n            var ctx = {\n              err: err,\n              pathname: pathname,\n              query: query\n            };\n            return new _promise[\"default\"](function (resolve) {\n              _this3.getInitialProps(Component, ctx).then(function (props) {\n                routeInfo.props = props;\n                routeInfo.error = err;\n                resolve(routeInfo);\n              }, function (gipErr) {\n                console.error('Error in error page `getInitialProps`: ', gipErr);\n                routeInfo.error = err;\n                routeInfo.props = {};\n                resolve(routeInfo);\n              });\n            });\n          }));\n        });\n      });\n    }\n  }, {\n    key: \"set\",\n    value: function set(route, pathname, query, as, data) {\n      this.route = route;\n      this.pathname = pathname;\n      this.query = query;\n      this.asPath = as;\n      this.notify(data);\n    }\n    /**\n     * Callback to execute before replacing router state\n     * @param cb callback to be executed\n     */\n\n  }, {\n    key: \"beforePopState\",\n    value: function beforePopState(cb) {\n      this._bps = cb;\n    }\n  }, {\n    key: \"onlyAHashChange\",\n    value: function onlyAHashChange(as) {\n      if (!this.asPath) return false;\n\n      var _this$asPath$split = this.asPath.split('#'),\n          _this$asPath$split2 = (0, _slicedToArray2[\"default\"])(_this$asPath$split, 2),\n          oldUrlNoHash = _this$asPath$split2[0],\n          oldHash = _this$asPath$split2[1];\n\n      var _as$split = as.split('#'),\n          _as$split2 = (0, _slicedToArray2[\"default\"])(_as$split, 2),\n          newUrlNoHash = _as$split2[0],\n          newHash = _as$split2[1]; // Makes sure we scroll to the provided hash if the url/hash are the same\n\n\n      if (newHash && oldUrlNoHash === newUrlNoHash && oldHash === newHash) {\n        return true;\n      } // If the urls are change, there's more than a hash change\n\n\n      if (oldUrlNoHash !== newUrlNoHash) {\n        return false;\n      } // If the hash has changed, then it's a hash only change.\n      // This check is necessary to handle both the enter and\n      // leave hash === '' cases. The identity case falls through\n      // and is treated as a next reload.\n\n\n      return oldHash !== newHash;\n    }\n  }, {\n    key: \"scrollToHash\",\n    value: function scrollToHash(as) {\n      var _as$split3 = as.split('#'),\n          _as$split4 = (0, _slicedToArray2[\"default\"])(_as$split3, 2),\n          hash = _as$split4[1]; // Scroll to top if the hash is just `#` with no value\n\n\n      if (hash === '') {\n        window.scrollTo(0, 0);\n        return;\n      } // First we check if the element by id is found\n\n\n      var idEl = document.getElementById(hash);\n\n      if (idEl) {\n        idEl.scrollIntoView();\n        return;\n      } // If there's no element with the id, we check the `name` property\n      // To mirror browsers\n\n\n      var nameEl = document.getElementsByName(hash)[0];\n\n      if (nameEl) {\n        nameEl.scrollIntoView();\n      }\n    }\n  }, {\n    key: \"urlIsNew\",\n    value: function urlIsNew(asPath) {\n      return this.asPath !== asPath;\n    }\n    /**\n     * Prefetch `page` code, you may wait for the data during `page` rendering.\n     * This feature only works in production!\n     * @param url of prefetched `page`\n     */\n\n  }, {\n    key: \"prefetch\",\n    value: function prefetch(url) {\n      var _this4 = this;\n\n      return new _promise[\"default\"](function (resolve, reject) {\n        // Prefetch is not supported in development mode because it would trigger on-demand-entries\n        if (process.env.NODE_ENV !== 'production' || process.env.__NEXT_EXPERIMENTAL_DEBUG) return;\n\n        var _url_1$parse2 = url_1.parse(url),\n            pathname = _url_1$parse2.pathname; // @ts-ignore pathname is always defined\n\n\n        var route = toRoute(pathname);\n\n        _this4.pageLoader.prefetch(route).then(resolve, reject);\n      });\n    }\n  }, {\n    key: \"fetchComponent\",\n    value: function () {\n      var _fetchComponent = (0, _asyncToGenerator2[\"default\"])(\n      /*#__PURE__*/\n      _regenerator[\"default\"].mark(function _callee(route) {\n        var cancelled, cancel, Component, error;\n        return _regenerator[\"default\"].wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                cancelled = false;\n\n                cancel = this.componentLoadCancel = function () {\n                  cancelled = true;\n                };\n\n                _context.next = 4;\n                return this.pageLoader.loadPage(route);\n\n              case 4:\n                Component = _context.sent;\n\n                if (!cancelled) {\n                  _context.next = 9;\n                  break;\n                }\n\n                error = new Error(\"Abort fetching component for route: \\\"\".concat(route, \"\\\"\"));\n                error.cancelled = true;\n                throw error;\n\n              case 9:\n                if (cancel === this.componentLoadCancel) {\n                  this.componentLoadCancel = null;\n                }\n\n                return _context.abrupt(\"return\", Component);\n\n              case 11:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function fetchComponent(_x) {\n        return _fetchComponent.apply(this, arguments);\n      }\n\n      return fetchComponent;\n    }()\n  }, {\n    key: \"getInitialProps\",\n    value: function () {\n      var _getInitialProps = (0, _asyncToGenerator2[\"default\"])(\n      /*#__PURE__*/\n      _regenerator[\"default\"].mark(function _callee2(Component, ctx) {\n        var cancelled, cancel, App, props, err;\n        return _regenerator[\"default\"].wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                cancelled = false;\n\n                cancel = function cancel() {\n                  cancelled = true;\n                };\n\n                this.componentLoadCancel = cancel;\n                App = this.components['/_app'].Component;\n                _context2.next = 6;\n                return utils_1.loadGetInitialProps(App, {\n                  Component: Component,\n                  router: this,\n                  ctx: ctx\n                });\n\n              case 6:\n                props = _context2.sent;\n\n                if (cancel === this.componentLoadCancel) {\n                  this.componentLoadCancel = null;\n                }\n\n                if (!cancelled) {\n                  _context2.next = 12;\n                  break;\n                }\n\n                err = new Error('Loading initial props cancelled');\n                err.cancelled = true;\n                throw err;\n\n              case 12:\n                return _context2.abrupt(\"return\", props);\n\n              case 13:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function getInitialProps(_x2, _x3) {\n        return _getInitialProps.apply(this, arguments);\n      }\n\n      return getInitialProps;\n    }()\n  }, {\n    key: \"abortComponentLoad\",\n    value: function abortComponentLoad(as) {\n      if (this.componentLoadCancel) {\n        Router.events.emit('routeChangeError', new Error('Route Cancelled'), as);\n        this.componentLoadCancel();\n        this.componentLoadCancel = null;\n      }\n    }\n  }, {\n    key: \"notify\",\n    value: function notify(data) {\n      var App = this.components['/_app'].Component;\n      this.subscriptions.forEach(function (fn) {\n        return fn((0, _assign[\"default\"])({}, data, {\n          App: App\n        }));\n      });\n    }\n  }, {\n    key: \"subscribe\",\n    value: function subscribe(fn) {\n      var _this5 = this;\n\n      this.subscriptions.add(fn);\n      return function () {\n        return _this5.subscriptions[\"delete\"](fn);\n      };\n    }\n  }], [{\n    key: \"_rewriteUrlForNextExport\",\n    value: function _rewriteUrlForNextExport(url) {\n      return rewrite_url_for_export_1.rewriteUrlForNextExport(url);\n    }\n  }]);\n  return Router;\n}();\n\nRouter.events = mitt_1[\"default\"]();\nexports[\"default\"] = Router;","map":{"version":3,"sources":["C:\\Users\\hejny\\work\\hejny\\talks\\node_modules\\next-server\\dist\\lib\\router\\router.js"],"names":["__importDefault","mod","__esModule","exports","value","url_1","require","mitt_1","utils_1","rewrite_url_for_export_1","route_matcher_1","route_regex_1","toRoute","path","replace","Router","pathname","query","as","initialProps","pageLoader","App","Component","err","onPopState","e","state","changeState","formatWithValidation","getURL","options","fromExternal","_bps","url","process","env","NODE_ENV","console","warn","route","components","props","events","asPath","subscriptions","componentLoadCancel","window","addEventListener","history","data","Error","newData","notify","location","reload","back","change","method","_url","_as","resolve","reject","__NEXT_EXPORT_TRAILING_SLASH","__NEXT_DATA__","nextExport","rewriteUrlForNextExport","abortComponentLoad","onlyAHashChange","emit","scrollToHash","parse","urlIsNew","shallow","indexOf","rr","getRouteRegex","routeMatch","getRouteMatcher","error","getRouteInfo","then","routeInfo","cancelled","hash","substring","set","cachedRouteInfo","fetchComponent","isValidElementType","ctx","getInitialProps","code","href","gipErr","cb","split","oldUrlNoHash","oldHash","newUrlNoHash","newHash","scrollTo","idEl","document","getElementById","scrollIntoView","nameEl","getElementsByName","__NEXT_EXPERIMENTAL_DEBUG","prefetch","cancel","loadPage","loadGetInitialProps","router","forEach","fn","add"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst url_1 = require(\"url\");\nconst mitt_1 = __importDefault(require(\"../mitt\"));\nconst utils_1 = require(\"../utils\");\nconst rewrite_url_for_export_1 = require(\"./rewrite-url-for-export\");\nconst route_matcher_1 = require(\"./utils/route-matcher\");\nconst route_regex_1 = require(\"./utils/route-regex\");\nfunction toRoute(path) {\n    return path.replace(/\\/$/, '') || '/';\n}\nclass Router {\n    constructor(pathname, query, as, { initialProps, pageLoader, App, Component, err, }) {\n        this.onPopState = (e) => {\n            if (!e.state) {\n                // We get state as undefined for two reasons.\n                //  1. With older safari (< 8) and older chrome (< 34)\n                //  2. When the URL changed with #\n                //\n                // In the both cases, we don't need to proceed and change the route.\n                // (as it's already changed)\n                // But we can simply replace the state with the new changes.\n                // Actually, for (1) we don't need to nothing. But it's hard to detect that event.\n                // So, doing the following for (1) does no harm.\n                const { pathname, query } = this;\n                this.changeState('replaceState', utils_1.formatWithValidation({ pathname, query }), utils_1.getURL());\n                return;\n            }\n            // Make sure we don't re-render on initial load,\n            // can be caused by navigating back from an external site\n            if (e.state.options && e.state.options.fromExternal) {\n                return;\n            }\n            // If the downstream application returns falsy, return.\n            // They will then be responsible for handling the event.\n            if (this._bps && !this._bps(e.state)) {\n                return;\n            }\n            const { url, as, options } = e.state;\n            if (process.env.NODE_ENV !== 'production') {\n                if (typeof url === 'undefined' || typeof as === 'undefined') {\n                    console.warn('`popstate` event triggered but `event.state` did not have `url` or `as` https://err.sh/zeit/next.js/popstate-state-empty');\n                }\n            }\n            this.replace(url, as, options);\n        };\n        // represents the current component key\n        this.route = toRoute(pathname);\n        // set up the component cache (by route keys)\n        this.components = {};\n        // We should not keep the cache, if there's an error\n        // Otherwise, this cause issues when when going back and\n        // come again to the errored page.\n        if (pathname !== '/_error') {\n            this.components[this.route] = { Component, props: initialProps, err };\n        }\n        this.components['/_app'] = { Component: App };\n        // Backwards compat for Router.router.events\n        // TODO: Should be remove the following major version as it was never documented\n        // @ts-ignore backwards compatibility\n        this.events = Router.events;\n        this.pageLoader = pageLoader;\n        this.pathname = pathname;\n        this.query = query;\n        this.asPath = as;\n        this.subscriptions = new Set();\n        this.componentLoadCancel = null;\n        if (typeof window !== 'undefined') {\n            // in order for `e.state` to work on the `onpopstate` event\n            // we have to register the initial route upon initialization\n            this.changeState('replaceState', utils_1.formatWithValidation({ pathname, query }), as);\n            window.addEventListener('popstate', this.onPopState);\n            window.addEventListener('unload', () => {\n                // Workaround for popstate firing on initial page load when\n                // navigating back from an external site\n                if (history.state) {\n                    const { url, as, options } = history.state;\n                    this.changeState('replaceState', url, as, Object.assign({}, options, { fromExternal: true }));\n                }\n            });\n        }\n    }\n    static _rewriteUrlForNextExport(url) {\n        return rewrite_url_for_export_1.rewriteUrlForNextExport(url);\n    }\n    update(route, Component) {\n        const data = this.components[route];\n        if (!data) {\n            throw new Error(`Cannot update unavailable route: ${route}`);\n        }\n        const newData = Object.assign({}, data, { Component });\n        this.components[route] = newData;\n        // pages/_app.js updated\n        if (route === '/_app') {\n            this.notify(this.components[this.route]);\n            return;\n        }\n        if (route === this.route) {\n            this.notify(newData);\n        }\n    }\n    reload() {\n        window.location.reload();\n    }\n    /**\n     * Go back in history\n     */\n    back() {\n        window.history.back();\n    }\n    /**\n     * Performs a `pushState` with arguments\n     * @param url of the route\n     * @param as masks `url` for the browser\n     * @param options object you can define `shallow` and other options\n     */\n    push(url, as = url, options = {}) {\n        return this.change('pushState', url, as, options);\n    }\n    /**\n     * Performs a `replaceState` with arguments\n     * @param url of the route\n     * @param as masks `url` for the browser\n     * @param options object you can define `shallow` and other options\n     */\n    replace(url, as = url, options = {}) {\n        return this.change('replaceState', url, as, options);\n    }\n    change(method, _url, _as, options) {\n        return new Promise((resolve, reject) => {\n            // If url and as provided as an object representation,\n            // we'll format them into the string version here.\n            const url = typeof _url === 'object' ? utils_1.formatWithValidation(_url) : _url;\n            let as = typeof _as === 'object' ? utils_1.formatWithValidation(_as) : _as;\n            // Add the ending slash to the paths. So, we can serve the\n            // \"<page>/index.html\" directly for the SSR page.\n            if (process.env.__NEXT_EXPORT_TRAILING_SLASH) {\n                // @ts-ignore this is temporarily global (attached to window)\n                if (__NEXT_DATA__.nextExport) {\n                    as = rewrite_url_for_export_1.rewriteUrlForNextExport(as);\n                }\n            }\n            this.abortComponentLoad(as);\n            // If the url change is only related to a hash change\n            // We should not proceed. We should only change the state.\n            if (this.onlyAHashChange(as)) {\n                this.asPath = as;\n                Router.events.emit('hashChangeStart', as);\n                this.changeState(method, url, as);\n                this.scrollToHash(as);\n                Router.events.emit('hashChangeComplete', as);\n                return resolve(true);\n            }\n            const { pathname, query } = url_1.parse(url, true);\n            // If asked to change the current URL we should reload the current page\n            // (not location.reload() but reload getInitialProps and other Next.js stuffs)\n            // We also need to set the method = replaceState always\n            // as this should not go into the history (That's how browsers work)\n            // We should compare the new asPath to the current asPath, not the url\n            if (!this.urlIsNew(as)) {\n                method = 'replaceState';\n            }\n            // @ts-ignore pathname is always a string\n            const route = toRoute(pathname);\n            const { shallow = false } = options;\n            // detect dynamic routing\n            if (route.indexOf('/$') !== -1) {\n                const rr = route_regex_1.getRouteRegex(route);\n                const routeMatch = route_matcher_1.getRouteMatcher(rr)(as);\n                if (!routeMatch) {\n                    console.error(\"Your `<Link>`'s `as` value is incompatible with the `href` value. This is invalid.\");\n                    return resolve(false);\n                }\n                // Merge params into `query`, overwriting any specified in search\n                Object.assign(query, routeMatch);\n            }\n            Router.events.emit('routeChangeStart', as);\n            // If shallow is true and the route exists in the router cache we reuse the previous result\n            // @ts-ignore pathname is always a string\n            this.getRouteInfo(route, pathname, query, as, shallow).then(routeInfo => {\n                const { error } = routeInfo;\n                if (error && error.cancelled) {\n                    return resolve(false);\n                }\n                Router.events.emit('beforeHistoryChange', as);\n                this.changeState(method, url, as, options);\n                const hash = window.location.hash.substring(1);\n                // @ts-ignore pathname is always defined\n                this.set(route, pathname, query, as, Object.assign({}, routeInfo, { hash }));\n                if (error) {\n                    Router.events.emit('routeChangeError', error, as);\n                    throw error;\n                }\n                Router.events.emit('routeChangeComplete', as);\n                return resolve(true);\n            }, reject);\n        });\n    }\n    changeState(method, url, as, options = {}) {\n        if (process.env.NODE_ENV !== 'production') {\n            if (typeof window.history === 'undefined') {\n                console.error(`Warning: window.history is not available.`);\n                return;\n            }\n            // @ts-ignore method should always exist on history\n            if (typeof window.history[method] === 'undefined') {\n                console.error(`Warning: window.history.${method} is not available`);\n                return;\n            }\n        }\n        if (method !== 'pushState' || utils_1.getURL() !== as) {\n            // @ts-ignore method should always exist on history\n            window.history[method]({ url, as, options }, null, as);\n        }\n    }\n    getRouteInfo(route, pathname, query, as, shallow = false) {\n        const cachedRouteInfo = this.components[route];\n        // If there is a shallow route transition possible\n        // If the route is already rendered on the screen.\n        if (shallow && cachedRouteInfo && this.route === route) {\n            return Promise.resolve(cachedRouteInfo);\n        }\n        return new Promise((resolve, reject) => {\n            if (cachedRouteInfo) {\n                return resolve(cachedRouteInfo);\n            }\n            this.fetchComponent(route).then(Component => resolve({ Component }), reject);\n        })\n            .then((routeInfo) => {\n            const { Component } = routeInfo;\n            if (process.env.NODE_ENV !== 'production') {\n                const { isValidElementType } = require('react-is');\n                if (!isValidElementType(Component)) {\n                    throw new Error(`The default export is not a React Component in page: \"${pathname}\"`);\n                }\n            }\n            return new Promise((resolve, reject) => {\n                const ctx = { pathname, query, asPath: as };\n                this.getInitialProps(Component, ctx).then(props => {\n                    routeInfo.props = props;\n                    this.components[route] = routeInfo;\n                    resolve(routeInfo);\n                }, reject);\n            });\n        })\n            .catch(err => {\n            return new Promise(resolve => {\n                if (err.code === 'PAGE_LOAD_ERROR') {\n                    // If we can't load the page it could be one of following reasons\n                    //  1. Page doesn't exists\n                    //  2. Page does exist in a different zone\n                    //  3. Internal error while loading the page\n                    // So, doing a hard reload is the proper way to deal with this.\n                    window.location.href = as;\n                    // Changing the URL doesn't block executing the current code path.\n                    // So, we need to mark it as a cancelled error and stop the routing logic.\n                    err.cancelled = true;\n                    // @ts-ignore TODO: fix the control flow here\n                    return resolve({ error: err });\n                }\n                if (err.cancelled) {\n                    // @ts-ignore TODO: fix the control flow here\n                    return resolve({ error: err });\n                }\n                resolve(this.fetchComponent('/_error').then(Component => {\n                    const routeInfo = { Component, err };\n                    const ctx = { err, pathname, query };\n                    return new Promise(resolve => {\n                        this.getInitialProps(Component, ctx).then(props => {\n                            routeInfo.props = props;\n                            routeInfo.error = err;\n                            resolve(routeInfo);\n                        }, gipErr => {\n                            console.error('Error in error page `getInitialProps`: ', gipErr);\n                            routeInfo.error = err;\n                            routeInfo.props = {};\n                            resolve(routeInfo);\n                        });\n                    });\n                }));\n            });\n        });\n    }\n    set(route, pathname, query, as, data) {\n        this.route = route;\n        this.pathname = pathname;\n        this.query = query;\n        this.asPath = as;\n        this.notify(data);\n    }\n    /**\n     * Callback to execute before replacing router state\n     * @param cb callback to be executed\n     */\n    beforePopState(cb) {\n        this._bps = cb;\n    }\n    onlyAHashChange(as) {\n        if (!this.asPath)\n            return false;\n        const [oldUrlNoHash, oldHash] = this.asPath.split('#');\n        const [newUrlNoHash, newHash] = as.split('#');\n        // Makes sure we scroll to the provided hash if the url/hash are the same\n        if (newHash && oldUrlNoHash === newUrlNoHash && oldHash === newHash) {\n            return true;\n        }\n        // If the urls are change, there's more than a hash change\n        if (oldUrlNoHash !== newUrlNoHash) {\n            return false;\n        }\n        // If the hash has changed, then it's a hash only change.\n        // This check is necessary to handle both the enter and\n        // leave hash === '' cases. The identity case falls through\n        // and is treated as a next reload.\n        return oldHash !== newHash;\n    }\n    scrollToHash(as) {\n        const [, hash] = as.split('#');\n        // Scroll to top if the hash is just `#` with no value\n        if (hash === '') {\n            window.scrollTo(0, 0);\n            return;\n        }\n        // First we check if the element by id is found\n        const idEl = document.getElementById(hash);\n        if (idEl) {\n            idEl.scrollIntoView();\n            return;\n        }\n        // If there's no element with the id, we check the `name` property\n        // To mirror browsers\n        const nameEl = document.getElementsByName(hash)[0];\n        if (nameEl) {\n            nameEl.scrollIntoView();\n        }\n    }\n    urlIsNew(asPath) {\n        return this.asPath !== asPath;\n    }\n    /**\n     * Prefetch `page` code, you may wait for the data during `page` rendering.\n     * This feature only works in production!\n     * @param url of prefetched `page`\n     */\n    prefetch(url) {\n        return new Promise((resolve, reject) => {\n            // Prefetch is not supported in development mode because it would trigger on-demand-entries\n            if (process.env.NODE_ENV !== 'production' ||\n                process.env.__NEXT_EXPERIMENTAL_DEBUG)\n                return;\n            const { pathname } = url_1.parse(url);\n            // @ts-ignore pathname is always defined\n            const route = toRoute(pathname);\n            this.pageLoader.prefetch(route).then(resolve, reject);\n        });\n    }\n    async fetchComponent(route) {\n        let cancelled = false;\n        const cancel = (this.componentLoadCancel = () => {\n            cancelled = true;\n        });\n        const Component = await this.pageLoader.loadPage(route);\n        if (cancelled) {\n            const error = new Error(`Abort fetching component for route: \"${route}\"`);\n            error.cancelled = true;\n            throw error;\n        }\n        if (cancel === this.componentLoadCancel) {\n            this.componentLoadCancel = null;\n        }\n        return Component;\n    }\n    async getInitialProps(Component, ctx) {\n        let cancelled = false;\n        const cancel = () => {\n            cancelled = true;\n        };\n        this.componentLoadCancel = cancel;\n        const { Component: App } = this.components['/_app'];\n        const props = await utils_1.loadGetInitialProps(App, {\n            Component,\n            router: this,\n            ctx,\n        });\n        if (cancel === this.componentLoadCancel) {\n            this.componentLoadCancel = null;\n        }\n        if (cancelled) {\n            const err = new Error('Loading initial props cancelled');\n            err.cancelled = true;\n            throw err;\n        }\n        return props;\n    }\n    abortComponentLoad(as) {\n        if (this.componentLoadCancel) {\n            Router.events.emit('routeChangeError', new Error('Route Cancelled'), as);\n            this.componentLoadCancel();\n            this.componentLoadCancel = null;\n        }\n    }\n    notify(data) {\n        const { Component: App } = this.components['/_app'];\n        this.subscriptions.forEach(fn => fn(Object.assign({}, data, { App })));\n    }\n    subscribe(fn) {\n        this.subscriptions.add(fn);\n        return () => this.subscriptions.delete(fn);\n    }\n}\nRouter.events = mitt_1.default();\nexports.default = Router;\n"]},"metadata":{},"sourceType":"script"}